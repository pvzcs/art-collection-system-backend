# Nginx 配置示例 - 美术作品收集系统
# 
# 使用说明：
# 1. 将此文件复制到 /etc/nginx/sites-available/art-collection
# 2. 修改域名、SSL 证书路径和后端服务器地址
# 3. 创建软链接: sudo ln -s /etc/nginx/sites-available/art-collection /etc/nginx/sites-enabled/
# 4. 测试配置: sudo nginx -t
# 5. 重启 Nginx: sudo systemctl restart nginx

# 上游服务器配置（Gin 应用）
upstream art_collection_backend {
    # 可以配置多个后端实例实现负载均衡
    server 127.0.0.1:8080 weight=1 max_fails=3 fail_timeout=30s;
    # server 127.0.0.1:8081 weight=1 max_fails=3 fail_timeout=30s;
    
    # 保持连接
    keepalive 32;
}

# HTTP 服务器 - 重定向到 HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name your-domain.com www.your-domain.com;

    # Let's Encrypt 验证路径
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # 重定向所有 HTTP 请求到 HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS 服务器
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name your-domain.com www.your-domain.com;

    # SSL 证书配置
    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
    
    # SSL 安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # 安全头
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # 日志配置
    access_log /var/log/nginx/art-collection-access.log;
    error_log /var/log/nginx/art-collection-error.log;

    # 客户端请求大小限制（与应用配置一致）
    client_max_body_size 10M;
    client_body_buffer_size 128k;

    # 超时配置
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    gzip_disable "msie6";

    # 禁止直接访问 uploads 目录（重要！）
    # 所有文件访问必须通过应用的代理接口进行权限验证
    location ~ ^/uploads/ {
        deny all;
        return 403;
    }

    # API 路由 - 反向代理到 Gin 应用
    location /api/ {
        # 代理到后端服务器
        proxy_pass http://art_collection_backend;
        
        # 代理头设置
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket 支持（如果需要）
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # 禁用缓冲以支持流式响应
        proxy_buffering off;
        
        # 保持连接
        proxy_set_header Connection "";
    }

    # 健康检查端点（可选）
    location /health {
        proxy_pass http://art_collection_backend/api/v1/health;
        access_log off;
    }

    # 根路径 - 可以配置前端静态文件或重定向
    location / {
        # 选项 1: 返回 API 信息
        return 200 '{"message":"Art Collection System API","version":"1.0"}';
        add_header Content-Type application/json;
        
        # 选项 2: 如果有前端静态文件，取消注释以下配置
        # root /var/www/art-collection-frontend;
        # index index.html;
        # try_files $uri $uri/ /index.html;
    }

    # 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# 速率限制配置（可选，在 http 块中配置）
# 在 /etc/nginx/nginx.conf 的 http 块中添加：
#
# # 定义速率限制区域
# limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
# limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/m;
# limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=10r/m;
#
# 然后在对应的 location 块中使用：
# location /api/v1/auth/login {
#     limit_req zone=login_limit burst=2 nodelay;
#     proxy_pass http://art_collection_backend;
#     # ... 其他配置
# }
#
# location /api/v1/artworks {
#     limit_req zone=upload_limit burst=5 nodelay;
#     proxy_pass http://art_collection_backend;
#     # ... 其他配置
# }
